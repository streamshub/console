<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.github.streamshub</groupId>
        <artifactId>console</artifactId>
        <version>0.7.0-SNAPSHOT</version>
    </parent>

    <artifactId>console-api</artifactId>
    <packaging>jar</packaging>

    <properties>
        <!-- Container image properties for systemtests -->
        <docker.registry>localhost</docker.registry>
        <docker.group>streamshub</docker.group>
        <docker.tag>${project.version}</docker.tag>
        <docker.push>false</docker.push>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.github.streamshub</groupId>
            <artifactId>console-common</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.config</groupId>
            <artifactId>microprofile-config-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.context-propagation</groupId>
            <artifactId>microprofile-context-propagation-api</artifactId>
        </dependency>

        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-micrometer-registry-prometheus</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-health</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-openapi</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-jsonp</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-hibernate-validator</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-kubernetes-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-oidc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.smallrye.common</groupId>
            <artifactId>smallrye-common-annotation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jboss.logging</groupId>
            <artifactId>jboss-logging</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.logmanager</groupId>
            <artifactId>log4j2-jboss-logmanager</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>io.strimzi</groupId>
            <artifactId>api</artifactId>
            <version>${strimzi-api.version}</version>
        </dependency>
        <dependency>
            <groupId>io.strimzi</groupId>
            <artifactId>kafka-oauth-client</artifactId>
        </dependency>

        <dependency>
            <groupId>io.apicurio</groupId>
            <artifactId>apicurio-registry-serdes-avro-serde</artifactId>
        </dependency>
        <dependency>
            <groupId>io.apicurio</groupId>
            <artifactId>apicurio-registry-serdes-protobuf-serde</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java-util</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>io.xlate</groupId>
            <artifactId>validators</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-test-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-test-kubernetes-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5-mockito</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-jacoco</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>1.5.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.docker-java</groupId>
            <artifactId>docker-java-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.strimzi</groupId>
            <artifactId>strimzi-test-container</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId>
            <version>1.70</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>io.smallrye</groupId>
                <artifactId>jandex-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-index</id>
                        <goals>
                            <goal>jandex</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>${quarkus.platform.group-id}</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <systemProperties>
                            </systemProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <goals>
                            <goal>analyze-only</goal>
                        </goals>
                        <configuration>
                            <failOnWarning>false</failOnWarning>
                            <ignoredDependencies>
                                <ignoredDependency>io.quarkus:quarkus-container-image-docker</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-container-image-jib</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-hibernate-validator</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-kafka-client</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-micrometer-registry-prometheus</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-smallrye-health</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-smallrye-jwt</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-smallrye-openapi</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-resteasy-reactive</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-resteasy-reactive-jackson</ignoredDependency>
                                <ignoredDependency>io.quarkus:quarkus-vertx</ignoredDependency>
                                <ignoredDependency>io.strimzi:kafka-oauth-client</ignoredDependency>
                                <ignoredDependency>io.vertx:vertx-core</ignoredDependency>
                                <ignoredDependency>io.vertx:vertx-web</ignoredDependency>
                                <ignoredDependency>org.apache.logging.log4j:log4j-api</ignoredDependency>
                                <ignoredDependency>org.eclipse.microprofile.config:microprofile-config-api</ignoredDependency>
                                <ignoredDependency>org.eclipse.microprofile.jwt:microprofile-jwt-auth-api</ignoredDependency>
                                <ignoredDependency>org.eclipse.microprofile.openapi:microprofile-openapi-api</ignoredDependency>
                                <ignoredDependency>org.jboss.logmanager:jboss-logmanager-embedded</ignoredDependency>
                                <ignoredDependency>org.jboss.logmanager:log4j2-jboss-logmanager</ignoredDependency>
                                <ignoredDependency>org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec</ignoredDependency>
                                <ignoredDependency>org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec</ignoredDependency>
                                <ignoredDependency>org.junit.jupiter</ignoredDependency>
                                <!-- Oauth kafka test dependencies -->
                                <ignoredDependency>io.strimzi:kafka-oauth-common</ignoredDependency>
                                <ignoredDependency>io.strimzi:kafka-oauth-server</ignoredDependency>
                                <ignoredDependency>io.strimzi:kafka-oauth-server-plain</ignoredDependency>
                                <ignoredDependency>io.strimzi:kafka-oauth-keycloak-authorizer</ignoredDependency>
                                <ignoredDependency>org.keycloak:keycloak-core</ignoredDependency>
                                <ignoredDependency>org.keycloak:keycloak-common</ignoredDependency>
                                <ignoredDependency>org.bouncycastle:bcprov-jdk15on</ignoredDependency>
                                <ignoredDependency>com.jayway.jsonpath:json-path</ignoredDependency>
                            </ignoredDependencies>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <excludes>
                                <exclude>com/github/streamshub/console/api/support/TrustAllCertificateManager.class</exclude>
                            </excludes>
                            <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>
                            <destFile>${project.basedir}/../target/jacoco.exec</destFile>
                            <append>true</append>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-prepare-agent-integration</id>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <excludes>
                                <exclude>com/github/streamshub/console/api/support/TrustAllCertificateManager.class</exclude>
                            </excludes>
                            <destFile>${project.basedir}/../target/jacoco.exec</destFile>
                            <append>true</append>
                        </configuration>
                    </execution>
                    <execution>
                        <id>report-aggregate</id>
                        <goals>
                            <goal>report-aggregate</goal>
                        </goals>
                        <phase>verify</phase>
                        <configuration>
                            <includeCurrentProject>true</includeCurrentProject>
                            <dataFileIncludes>
                                <dataFileInclude>${project.basedir}/../target/jacoco.exec</dataFileInclude>
                            </dataFileIncludes>
                            <excludes>
                                <exclude>com/github/streamshub/console/config/**/*Builder.class</exclude>
                                <exclude>com/github/streamshub/console/config/**/*Fluent.class</exclude>
                                <exclude>com/github/streamshub/console/config/**/*Nested.class</exclude>
                            </excludes>
                            <outputDirectory>${project.basedir}/../target/coverage</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
                    <systemProperties>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>${maven.home}</maven.home>
                        <quarkus.jacoco.reuse-data-file>true</quarkus.jacoco.reuse-data-file>
                        <quarkus.jacoco.report>false</quarkus.jacoco.report>
                        <quarkus.test.arg-line>${argLine}</quarkus.test.arg-line>
                    </systemProperties>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <redirectTestOutputToFile>true</redirectTestOutputToFile>
                            <systemProperties>
                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                                <maven.home>${maven.home}</maven.home>
                                <quarkus.jacoco.reuse-data-file>true</quarkus.jacoco.reuse-data-file>
                                <quarkus.jacoco.report>false</quarkus.jacoco.report>
                                <quarkus.test.arg-line>${argLine}</quarkus.test.arg-line>
                            </systemProperties>
                            <environmentVariables>
                                <DOCKER_CONFIG>${env.HOME}/.docker/config.json</DOCKER_CONFIG>
                            </environmentVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>container-image</id>
            <properties>
                <quarkus.profile>build</quarkus.profile>
                <quarkus.docker.dockerfile-jvm-path>src/main/docker/Dockerfile</quarkus.docker.dockerfile-jvm-path>
                <quarkus.container-image.build>true</quarkus.container-image.build>
                <quarkus.container-image.registry>${container-image.registry}</quarkus.container-image.registry>
                <quarkus.container-image.group>${container-image.group}</quarkus.container-image.group>
                <quarkus.container-image.tag>${container-image.tag}</quarkus.container-image.tag>
                <quarkus.container-image.push>${container-image.push}</quarkus.container-image.push>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>io.quarkus</groupId>
                    <artifactId>quarkus-container-image-docker</artifactId>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
</project>
