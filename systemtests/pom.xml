<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.github.streamshub</groupId>
        <artifactId>console</artifactId>
        <version>0.9.0-SNAPSHOT</version>
    </parent>

    <artifactId>console-systemtests</artifactId>
    <description>
        The intention of this module is to test StreamsHub Console UI with kafka instance deployed and managed by Strimzi Cluster Operator, to simulate a real user scenarios for end-to-end testing.
    </description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- Simple logging facade for java for log4j -->
        <log4j.version>2.25.1</log4j.version>
        <slf4j.version>2.0.17</slf4j.version>
        <!-- Helm -->
        <helm-client.version>0.0.15</helm-client.version>
        <!-- Playwright -->
        <playwright.version>1.54.0</playwright.version>
        <!-- Used for test-frame -->
        <test-frame.version>1.1.0</test-frame.version>
        <!-- Allows skipping tests - unit, system or both types -->
        <skipTests>false</skipTests>
        <skipUTs>${skipTests}</skipUTs>
        <skipSTs>${skipTests}</skipSTs>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-bom</artifactId>
                <version>${log4j.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-bom</artifactId>
                <version>${slf4j.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.streamshub</groupId>
            <artifactId>console-operator</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <!-- Exclude JBoss SLF4J and LogManager from quarkus-->
                <exclusion>
                    <groupId>org.jboss.slf4j</groupId>
                    <artifactId>slf4j-jboss-logmanager</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.slf4j</groupId>
                    <artifactId>slf4j-jboss-logging</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.logmanager</groupId>
                    <artifactId>jboss-logmanager</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Playwright used for system testing UI -->
        <dependency>
            <groupId>com.microsoft.playwright</groupId>
            <artifactId>playwright</artifactId>
            <version>${playwright.version}</version>
        </dependency>
        <!-- Strimzi API helps to interact with Kafka -->
        <dependency>
            <groupId>io.strimzi</groupId>
            <artifactId>api</artifactId>
            <version>${strimzi-api.version}</version>
        </dependency>
        <!-- Test Frame used for handling k8s resources -->
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-common</artifactId>
            <version>${test-frame.version}</version>
        </dependency>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-kubernetes</artifactId>
            <version>${test-frame.version}</version>
        </dependency>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-openshift</artifactId>
            <version>${test-frame.version}</version>
        </dependency>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-log-collector</artifactId>
            <version>${test-frame.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-client</artifactId>
        </dependency>
        <!-- JUnit 5 Jupiter API and Engine -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
        </dependency>
        <!-- Logger -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j2-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.marcnuri.helm-java</groupId>
            <artifactId>helm-java</artifactId>
            <version>${helm-client.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <!-- Used for unit testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>${skipUTs}</skipTests>
                    <includes>
                        <!-- Use only conventional UT naming - *Test.java -->
                        <include>**/*Test.java</include>
                    </includes>
                    <!-- Known issue, mocking in order to change ENV for UTs needs `add-opens` for utils package,
                    but then jacoco needs no argLine or @argLine to be passed to JVM in order to run properly -->
                    <argLine>
                        @{argLine}
                        --add-opens java.base/java.util=ALL-UNNAMED
                        --add-opens java.base/java.lang=ALL-UNNAMED
                    </argLine>
                </configuration>
            </plugin>
            <!-- Used for system testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>system-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skipTests>${skipSTs}</skipTests>
                    <includes>
                        <include>**/*ST.java</include>
                    </includes>
                </configuration>
            </plugin>
            <!-- Used for code coverage with UT -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <executions>
                    <!-- Attach JaCoCo agent to unit tests -->
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${project.build.directory}/jacoco-unit.exec</destFile>
                            <append>true</append>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>


    <profiles>
        <profile>
            <id>none</id>
            <properties>
                <skipTests>true</skipTests>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

        <profile>
            <id>regression</id>
            <properties>
                <skipTests>false</skipTests>
            </properties>
        </profile>
    </profiles>
</project>