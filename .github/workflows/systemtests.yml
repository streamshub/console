name: Systemtest

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit sha'
        required: true
      testcase:
        description: 'Test case to run'
        required: false
      profile:
        description: 'Profile to use'
        required: false
      install_type:
        description: 'Install type to use'
        required: false
      retry_count:
        description: 'Retry count to use'
        required: false
      envs:
        description: 'Envs to use for tests'
        required: false

jobs:
  generate-matrix:
    permissions:
      contents: read
      statuses: write
      pull-requests: write
    runs-on: ubuntu-24.04
    env:
      GH_TOKEN: ${{ secrets.BOT_ORG_SCOPED_TOKEN }}
      REPO: ${{ github.repository }}
      COMMIT_SHA: ${{ github.event.inputs.commit_sha }}
      TESTCASE: ${{ github.event.inputs.testcase }}
      PROFILE: ${{ github.event.inputs.profile }}
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ env.COMMIT_SHA }}

      - name: Get previously built artifacts
        run: |
          ARTIFACTS_RUN_ID=$(gh run list --repo $REPO --commit $COMMIT_SHA --workflow integration.yml --status success --json databaseId --jq '.[0].databaseId')
          echo "ARTIFACTS_RUN_ID=$ARTIFACTS_RUN_ID" >> $GITHUB_ENV

      - name: Generate ST matrix
        id: generate-matrix
        run: ./.github/actions/systemtests/generate-test-matrix.sh


  # Run single or matrix of ST jobs
  run-systemtests:
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      max-parallel: 2
    permissions:
      contents: read
      statuses: write
      pull-requests: write
    runs-on: ubuntu-24.04
    env:
      # Need to use MATRIX TEST_CASE instead of the testcase from trigger job
      TEST_CASE: ${{ matrix.testcase }}
      PROFILE: ${{ matrix.profile }}
      COMMIT_SHA: ${{ github.event.inputs.commit_sha }}
      GH_TOKEN: ${{ secrets.BOT_ORG_SCOPED_TOKEN }}
      REPO: ${{ github.repository }}
      INSTALL_TYPE: ${{ github.event.inputs.install_type }}
      RETRY_COUNT: ${{ github.event.inputs.retry_count }}
      ENVS: ${{ github.event.inputs.env_str }}
      CO_NAMESPACE: "co-namespace"
      OLM_MINIKUBE_NAMESPACE: "olm"
      OLM_VERSION: "v0.28.0"
      YQ_VERSION: "v4.44.1"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ env.COMMIT_SHA }}
      - name: Download Images
        id: download-artifact
        uses: dawidd6/action-download-artifact@ac66b43f0e6a346234dd65d4d0c8fbb31cb316e5
        with:
          github_token: ${{ env.GH_TOKEN }}
          workflow: integration.yml
          workflow_conclusion: success
          run_id: ${{ env.ARTIFACTS_RUN_ID }}
          skip_unpack: false
          repo: ${{ env.REPO }}
          name: streamshub-images

      - name: Setup Minikube
        id: setup_minikube
        uses: ./.github/actions/setup-minikube
        with:
          MEM: 15g
          CPUS: 4

      - name: Set Dynamic Environment Vars
        run: |
          echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "CONSOLE_CLUSTER_DOMAIN=$(minikube ip).nip.io" >> $GITHUB_ENV

      # YAML INSTALL PATH
      - name: Prepare YAML install
        if: ${{ env.INSTALL_TYPE == 'yaml' }}
        run: |
          set -x
          echo "Preparing YAML-based installation..."

          # Download k8s-resources artifact (same run as images)
          gh run download ${{ env.ARTIFACTS_RUN_ID }} --repo ${{ env.REPO }}  -n k8s-resources --dir ./k8s-resources

          # Merge YAML files
          mkdir -p ./k8s-resources/merged
          cat ./k8s-resources/kubernetes/consoles.console.streamshub.github.com-v1.yml \
              ./k8s-resources/kubernetes/kubernetes.yml \
              > ./k8s-resources/merged/streamshub-console-operator.yaml

          # Export as environment variable
          echo "CONSOLE_INSTALL_TYPE=yaml" >> $GITHUB_ENV
          CONSOLE_OPERATOR_BUNDLE_URL=$(realpath ./k8s-resources/merged/streamshub-console-operator.yaml)
          echo "CONSOLE_OPERATOR_BUNDLE_URL=$CONSOLE_OPERATOR_BUNDLE_URL" >> $GITHUB_ENV

          echo "YAML operator manifest created at: $CONSOLE_OPERATOR_BUNDLE_URL"
          cat $CONSOLE_OPERATOR_BUNDLE_URL

      # OLM INSTALL PATH
      - name: Deploy OLM CatalogSource
        if: ${{ env.INSTALL_TYPE == 'olm' }}
        run: |
          set -x

          echo "CONSOLE_OLM_CATALOG_SOURCE_NAME=streamshub-console-catalog" >> $GITHUB_ENV
          echo "CONSOLE_OLM_CATALOG_SOURCE_NAMESPACE=$OLM_MINIKUBE_NAMESPACE" >> $GITHUB_ENV

          # Create the CatalogSource with the Console operator bundle
          yq ea '.spec.image = "localhost:5000/streamshub/console-operator-catalog:${{ env.PROJECT_VERSION }}"' \
            ./install/operator/olm/010-CatalogSource-console-operator-catalog.yaml \
            | kubectl apply -n $OLM_MINIKUBE_NAMESPACE -f -

          kubectl wait catalogsource/streamshub-console-catalog -n $OLM_MINIKUBE_NAMESPACE \
            --for=jsonpath='{.status.connectionState.lastObservedState}'=READY \
            --timeout=180s

      - name: Install Playwright Via NodeJS
        uses: actions/setup-node@v6
        with:
          node-version: lts/*
      - run: |
          npm install -g playwright
          npx playwright install --with-deps

      - name: Setup JDK
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project
        run: |
          mvn clean install -B -DskipTests --no-transfer-progress

      - name: Prepare systemtest ENV
        run: ./.github/actions/systemtests/prepare-systemtests-env.sh

      - name: Run systemtests
        run: |
          mvn clean verify -B --no-transfer-progress -pl systemtests $PARAMETERS

      - name: Archive systemtest artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: systemtests-artifacts-${{ matrix.testcase }}${{ matrix.profile && format('-{0}', matrix.profile) || '' }}
          if-no-files-found: warn
          path: |
            systemtests/target/**/TEST-*.xml
            systemtests/target/logs/**
            systemtests/screenshot/**
            systemtests/tracing/**

  aggregate-results:
    needs: run-systemtests
    permissions:
      contents: read
      statuses: write
      pull-requests: write
    runs-on: ubuntu-24.04
    # Ensure this job runs even if tests failed
    if: always()
    env:
      COMMIT_SHA: ${{ github.event.inputs.commit_sha }}
      GH_TOKEN: ${{ secrets.BOT_ORG_SCOPED_TOKEN }}
      REPO: ${{ github.repository }}
      TEST_CASE: ${{ github.event.inputs.testcase }}
      PROFILE: ${{ github.event.inputs.profile }}
      INSTALL_TYPE: ${{ github.event.inputs.install_type }}
      RETRY_COUNT: ${{ github.event.inputs.retry_count }}
      ENVS: ${{ github.event.inputs.env_str }}
    steps:
      - uses: actions/checkout@v5
      - name: Download all systemtest artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: systemtests-artifacts-*
          merge-multiple: true
          path: ./all-systemtest-artifacts

      - name: Get current PR number
        run: |
          PR_NUMBER=$(gh pr list --repo $REPO --state open --search $COMMIT_SHA --json number,createdAt -q "sort_by(.createdAt) | .[-1] | .number")
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Parse results and update PR status
        if: always()
        run: ./.github/actions/systemtests/parse-results-update-pr.sh
